# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)

import random

def new_list(msg):
  size = int(input(msg))
  list = [random.randint(-10, 10) for _ in range(size)] 
  return list

def elements(list_1, list_2):
  unic_list = list()
  for item in list_1:
    if item not in list_2:
      unic_list.append(item)
  return unic_list

# 

# new_complex_list = [i for i in list_1 if i not in list_2]
# print(list_1, list_2, new_complex_list, sep="\n") 
# print(list_1, list_2, elements(list_1, list_2), sep="\n") 
# sep для того чтобы добавить пробелы


# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 3 4 5 1 5 1 5 1
# Вывод: Вывод:
# 0 2

def neighboors(list):
  count = 0
  for item in range(1,len(list)-1):
    if list[item-1] < list[item] > list[item+1]:
      count+=1
  return count

# list_min = new_list("Введите размер массива: ")
# print(f"Количество таких элементов в списке {list_min}: {neighboors(list_min)}")

# mew_complex_min = [1 for i in range(1,len(list_min)-1) 
#                    if list_min[i-1] < list_min[i] > list_min[i+1]]
# [1 - что добавляем
# for i in range(1,len(list_min)-1) - по какому списку проходим
# if list_min[i-1] < list_min[i] > list_min[i+1]] - при каких условиях выводим

# print(f"Количество таких элементов в списке {list_min}: {len(mew_complex_min)}")


# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод: 1 2 3 2 3 2
# Вывод: 2 



def find_pairs(list, count=0):
  unic_dict = {}
  for item in list:
    unic_dict[item] = unic_dict.get(item, 0) +1
  for values in unic_dict.values():
    count += values//2
  return count

# pairs = new_list("Введите размер массива: ") 

# print(pairs, find_pairs(pairs), sep="\n") 

# repeats = sum([pairs.count(i)//2 for i in set(pairs)])
# print(repeats)

# repeats = sum - используем инструмент подсчета суммы
# ([pairs.count(i)//2 - используем инструмент, 
# который считает количество уникальных вхождений в множестве(сете)
# количества вхождений точно делим на 2 чтобы определить пары
# for i in set(pairs)]) - проходимся по множеству (перевели список в множество)


# Задача №45. Общее обсуждение
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105. Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: 300 Вывод: 220 284

def summorize(num, sum = 0):
  for item in range(1, num//2+1):
    if num % item == 0:
      sum+= item
  return sum

# number = int(input("Введите число: "))
# if number > 10000:
#   print("Ошибка, число превышает 10 в 5 степени")
# else:
#   for i in range(1,10000):
#     j = summorize(i)
#     if i < j <= number and i != summorize(j):
#       print (i,j)
      
      
# Задача 30: Заполните массив элементами арифметической
# прогрессии. Её первый элемент, разность и количество
# элементов нужно ввести с клавиатуры. Формула для
# получения n-го члена прогрессии: a
# n
#  = a1
#  + (n-1) * d.
# Каждое число вводится с новой строки.
# Ввод: 7 2 5
# Вывод: 7 9 11 13 15

# first_number = int(input("Введите первый элемент: "))
# difference = int(input("Введите разность: "))
# quality = int(input("Введите количество элементов: "))

# print(*range(first_number, first_number+difference * quality, difference))

# Задача 32: Определить индексы элементов массива (списка),
# значения которых принадлежат заданному диапазону (т.е. не
# меньше заданного минимума и не больше заданного
# максимума)
# Ввод: [-5, 9, 0, 3, -1, -2, 1,
# 4, -2, 10, 2, 0, -9, 8, 10, -9,
# 0, -5, -5, 7]
# Вывод: [1, 9, 13, 14, 19]

def indexes (list, minimum, maximum):
  new_list1 = []
  for i in range (len(list)):
    if minimum < list[i] < maximum:
      new_list1.append(i)
  return new_list1

list1 = new_list("Введите размер списка: ")
print(list1)
minn = int(input("Введите диапазон от: "))
maxx = int(input("Введите диапазон до: "))

print(indexes(list1, minn, maxx))